<?php
/**
 * Body
 *
 * PHP version 5
 *
 * @category Class
 * @package  HelloAsso\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hello Asso
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HelloAsso\Api\Model;

use \ArrayAccess;
use \HelloAsso\Api\ObjectSerializer;

/**
 * Body Class Doc Comment
 *
 * @category Class
 * @package  HelloAsso\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'string',
'client_secret' => 'string',
'grant_type' => 'string',
'refresh_token' => 'string',
'user_email' => 'string',
'user_first_name' => 'string',
'user_last_name' => 'string',
'organization_name' => 'string',
'organization_address' => 'string',
'organization_zipcode' => 'string',
'organization_city' => 'string',
'organization_phone' => 'string',
'organization_type' => 'string',
'organization_website' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id' => null,
'client_secret' => null,
'grant_type' => null,
'refresh_token' => null,
'user_email' => null,
'user_first_name' => null,
'user_last_name' => null,
'organization_name' => null,
'organization_address' => null,
'organization_zipcode' => null,
'organization_city' => null,
'organization_phone' => null,
'organization_type' => null,
'organization_website' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
'client_secret' => 'client_secret',
'grant_type' => 'grant_type',
'refresh_token' => 'refresh_token',
'user_email' => 'user_email',
'user_first_name' => 'user_first_name',
'user_last_name' => 'user_last_name',
'organization_name' => 'organization_name',
'organization_address' => 'organization_address',
'organization_zipcode' => 'organization_zipcode',
'organization_city' => 'organization_city',
'organization_phone' => 'organization_phone',
'organization_type' => 'organization_type',
'organization_website' => 'organization_website'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
'client_secret' => 'setClientSecret',
'grant_type' => 'setGrantType',
'refresh_token' => 'setRefreshToken',
'user_email' => 'setUserEmail',
'user_first_name' => 'setUserFirstName',
'user_last_name' => 'setUserLastName',
'organization_name' => 'setOrganizationName',
'organization_address' => 'setOrganizationAddress',
'organization_zipcode' => 'setOrganizationZipcode',
'organization_city' => 'setOrganizationCity',
'organization_phone' => 'setOrganizationPhone',
'organization_type' => 'setOrganizationType',
'organization_website' => 'setOrganizationWebsite'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
'client_secret' => 'getClientSecret',
'grant_type' => 'getGrantType',
'refresh_token' => 'getRefreshToken',
'user_email' => 'getUserEmail',
'user_first_name' => 'getUserFirstName',
'user_last_name' => 'getUserLastName',
'organization_name' => 'getOrganizationName',
'organization_address' => 'getOrganizationAddress',
'organization_zipcode' => 'getOrganizationZipcode',
'organization_city' => 'getOrganizationCity',
'organization_phone' => 'getOrganizationPhone',
'organization_type' => 'getOrganizationType',
'organization_website' => 'getOrganizationWebsite'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GRANT_TYPE_ORGANIZATION_PRE_SIGNUP = 'organization_pre_signup';
const GRANT_TYPE_REFRESH_TOKEN = 'refresh_token';
const ORGANIZATION_TYPE_ASSOCIATION1901_RIG = 'Association1901Rig';
const ORGANIZATION_TYPE_ASSOCIATION1901_RUP = 'Association1901Rup';
const ORGANIZATION_TYPE_ASSOCIATION1901 = 'Association1901';
const ORGANIZATION_TYPE_FONDATION_RUP = 'FondationRup';
const ORGANIZATION_TYPE_FOND_DOTATION = 'FondDotation';
const ORGANIZATION_TYPE_FONDATION_SOUS_EGIDE = 'FondationSousEgide';
const ORGANIZATION_TYPE_FONDATION_SCIENTIFIQUE = 'FondationScientifique';
const ORGANIZATION_TYPE_FONDATION_PARTENARIALE = 'FondationPartenariale';
const ORGANIZATION_TYPE_FONDATION_UNIVERSITAIRE = 'FondationUniversitaire';
const ORGANIZATION_TYPE_FONDATION_HOSPITALIERE = 'FondationHospitaliere';
const ORGANIZATION_TYPE_ASSOCIATION1905 = 'Association1905';
const ORGANIZATION_TYPE_ASSOCIATION1905_RUP = 'Association1905Rup';
const ORGANIZATION_TYPE_ENTREPRISE = 'Entreprise';
const ORGANIZATION_TYPE_COOPERATIVE = 'Cooperative';
const ORGANIZATION_TYPE_ETABLISSEMENT = 'Etablissement';
const ORGANIZATION_TYPE_ASSOCIATION1908 = 'Association1908';
const ORGANIZATION_TYPE_ASSOCIATION1908_RIG = 'Association1908Rig';
const ORGANIZATION_TYPE_ASSOCIATION1908_RUP = 'Association1908Rup';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGrantTypeAllowableValues()
    {
        return [
            self::GRANT_TYPE_ORGANIZATION_PRE_SIGNUP,
self::GRANT_TYPE_REFRESH_TOKEN,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrganizationTypeAllowableValues()
    {
        return [
            self::ORGANIZATION_TYPE_ASSOCIATION1901_RIG,
self::ORGANIZATION_TYPE_ASSOCIATION1901_RUP,
self::ORGANIZATION_TYPE_ASSOCIATION1901,
self::ORGANIZATION_TYPE_FONDATION_RUP,
self::ORGANIZATION_TYPE_FOND_DOTATION,
self::ORGANIZATION_TYPE_FONDATION_SOUS_EGIDE,
self::ORGANIZATION_TYPE_FONDATION_SCIENTIFIQUE,
self::ORGANIZATION_TYPE_FONDATION_PARTENARIALE,
self::ORGANIZATION_TYPE_FONDATION_UNIVERSITAIRE,
self::ORGANIZATION_TYPE_FONDATION_HOSPITALIERE,
self::ORGANIZATION_TYPE_ASSOCIATION1905,
self::ORGANIZATION_TYPE_ASSOCIATION1905_RUP,
self::ORGANIZATION_TYPE_ENTREPRISE,
self::ORGANIZATION_TYPE_COOPERATIVE,
self::ORGANIZATION_TYPE_ETABLISSEMENT,
self::ORGANIZATION_TYPE_ASSOCIATION1908,
self::ORGANIZATION_TYPE_ASSOCIATION1908_RIG,
self::ORGANIZATION_TYPE_ASSOCIATION1908_RUP,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_secret'] = isset($data['client_secret']) ? $data['client_secret'] : null;
        $this->container['grant_type'] = isset($data['grant_type']) ? $data['grant_type'] : null;
        $this->container['refresh_token'] = isset($data['refresh_token']) ? $data['refresh_token'] : null;
        $this->container['user_email'] = isset($data['user_email']) ? $data['user_email'] : null;
        $this->container['user_first_name'] = isset($data['user_first_name']) ? $data['user_first_name'] : null;
        $this->container['user_last_name'] = isset($data['user_last_name']) ? $data['user_last_name'] : null;
        $this->container['organization_name'] = isset($data['organization_name']) ? $data['organization_name'] : null;
        $this->container['organization_address'] = isset($data['organization_address']) ? $data['organization_address'] : null;
        $this->container['organization_zipcode'] = isset($data['organization_zipcode']) ? $data['organization_zipcode'] : null;
        $this->container['organization_city'] = isset($data['organization_city']) ? $data['organization_city'] : null;
        $this->container['organization_phone'] = isset($data['organization_phone']) ? $data['organization_phone'] : null;
        $this->container['organization_type'] = isset($data['organization_type']) ? $data['organization_type'] : null;
        $this->container['organization_website'] = isset($data['organization_website']) ? $data['organization_website'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['grant_type'] === null) {
            $invalidProperties[] = "'grant_type' can't be null";
        }
        $allowedValues = $this->getGrantTypeAllowableValues();
        if (!is_null($this->container['grant_type']) && !in_array($this->container['grant_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'grant_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrganizationTypeAllowableValues();
        if (!is_null($this->container['organization_type']) && !in_array($this->container['organization_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'organization_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id Your Client Id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string $client_secret Your client Secret
     *
     * @return $this
     */
    public function setClientSecret($client_secret)
    {
        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets grant_type
     *
     * @return string
     */
    public function getGrantType()
    {
        return $this->container['grant_type'];
    }

    /**
     * Sets grant_type
     *
     * @param string $grant_type organization_pre_signup
     *
     * @return $this
     */
    public function setGrantType($grant_type)
    {
        $allowedValues = $this->getGrantTypeAllowableValues();
        if (!in_array($grant_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'grant_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grant_type'] = $grant_type;

        return $this;
    }

    /**
     * Gets refresh_token
     *
     * @return string
     */
    public function getRefreshToken()
    {
        return $this->container['refresh_token'];
    }

    /**
     * Sets refresh_token
     *
     * @param string $refresh_token The refresh token issued to the client in case of refresh_token grant_type
     *
     * @return $this
     */
    public function setRefreshToken($refresh_token)
    {
        $this->container['refresh_token'] = $refresh_token;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string $user_email The organization administrator email, a confirmation email will be sent to this email to finalize the subscription
     *
     * @return $this
     */
    public function setUserEmail($user_email)
    {
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets user_first_name
     *
     * @return string
     */
    public function getUserFirstName()
    {
        return $this->container['user_first_name'];
    }

    /**
     * Sets user_first_name
     *
     * @param string $user_first_name user_first_name
     *
     * @return $this
     */
    public function setUserFirstName($user_first_name)
    {
        $this->container['user_first_name'] = $user_first_name;

        return $this;
    }

    /**
     * Gets user_last_name
     *
     * @return string
     */
    public function getUserLastName()
    {
        return $this->container['user_last_name'];
    }

    /**
     * Sets user_last_name
     *
     * @param string $user_last_name user_last_name
     *
     * @return $this
     */
    public function setUserLastName($user_last_name)
    {
        $this->container['user_last_name'] = $user_last_name;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string $organization_name The organization name will be used to create the URL on Helloasso.com
     *
     * @return $this
     */
    public function setOrganizationName($organization_name)
    {
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets organization_address
     *
     * @return string
     */
    public function getOrganizationAddress()
    {
        return $this->container['organization_address'];
    }

    /**
     * Sets organization_address
     *
     * @param string $organization_address organization_address
     *
     * @return $this
     */
    public function setOrganizationAddress($organization_address)
    {
        $this->container['organization_address'] = $organization_address;

        return $this;
    }

    /**
     * Gets organization_zipcode
     *
     * @return string
     */
    public function getOrganizationZipcode()
    {
        return $this->container['organization_zipcode'];
    }

    /**
     * Sets organization_zipcode
     *
     * @param string $organization_zipcode organization_zipcode
     *
     * @return $this
     */
    public function setOrganizationZipcode($organization_zipcode)
    {
        $this->container['organization_zipcode'] = $organization_zipcode;

        return $this;
    }

    /**
     * Gets organization_city
     *
     * @return string
     */
    public function getOrganizationCity()
    {
        return $this->container['organization_city'];
    }

    /**
     * Sets organization_city
     *
     * @param string $organization_city organization_city
     *
     * @return $this
     */
    public function setOrganizationCity($organization_city)
    {
        $this->container['organization_city'] = $organization_city;

        return $this;
    }

    /**
     * Gets organization_phone
     *
     * @return string
     */
    public function getOrganizationPhone()
    {
        return $this->container['organization_phone'];
    }

    /**
     * Sets organization_phone
     *
     * @param string $organization_phone organization_phone
     *
     * @return $this
     */
    public function setOrganizationPhone($organization_phone)
    {
        $this->container['organization_phone'] = $organization_phone;

        return $this;
    }

    /**
     * Gets organization_type
     *
     * @return string
     */
    public function getOrganizationType()
    {
        return $this->container['organization_type'];
    }

    /**
     * Sets organization_type
     *
     * @param string $organization_type organization_type
     *
     * @return $this
     */
    public function setOrganizationType($organization_type)
    {
        $allowedValues = $this->getOrganizationTypeAllowableValues();
        if (!is_null($organization_type) && !in_array($organization_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'organization_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['organization_type'] = $organization_type;

        return $this;
    }

    /**
     * Gets organization_website
     *
     * @return string
     */
    public function getOrganizationWebsite()
    {
        return $this->container['organization_website'];
    }

    /**
     * Sets organization_website
     *
     * @param string $organization_website organization_website
     *
     * @return $this
     */
    public function setOrganizationWebsite($organization_website)
    {
        $this->container['organization_website'] = $organization_website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
