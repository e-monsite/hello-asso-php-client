<?php
/**
 * OrganizationCampaignsResponseResources
 *
 * PHP version 5
 *
 * @category Class
 * @package  HelloAsso\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hello Asso
 *
 * www.helloasso.com Api specifications
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HelloAsso\Api\Model;

use \ArrayAccess;
use \HelloAsso\Api\ObjectSerializer;

/**
 * OrganizationCampaignsResponseResources Class Doc Comment
 *
 * @category Class
 * @package  HelloAsso\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationCampaignsResponseResources implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationCampaignsResponse_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'slug' => 'string',
'url' => 'string',
'url_widget' => 'string',
'url_bouton' => 'string',
'name_organism' => 'string',
'slug_organism' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'slug' => null,
'url' => null,
'url_widget' => null,
'url_bouton' => null,
'name_organism' => null,
'slug_organism' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'slug' => 'slug',
'url' => 'url',
'url_widget' => 'url_widget',
'url_bouton' => 'url_bouton',
'name_organism' => 'name_organism',
'slug_organism' => 'slug_organism'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'slug' => 'setSlug',
'url' => 'setUrl',
'url_widget' => 'setUrlWidget',
'url_bouton' => 'setUrlBouton',
'name_organism' => 'setNameOrganism',
'slug_organism' => 'setSlugOrganism'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'slug' => 'getSlug',
'url' => 'getUrl',
'url_widget' => 'getUrlWidget',
'url_bouton' => 'getUrlBouton',
'name_organism' => 'getNameOrganism',
'slug_organism' => 'getSlugOrganism'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['url_widget'] = isset($data['url_widget']) ? $data['url_widget'] : null;
        $this->container['url_bouton'] = isset($data['url_bouton']) ? $data['url_bouton'] : null;
        $this->container['name_organism'] = isset($data['name_organism']) ? $data['name_organism'] : null;
        $this->container['slug_organism'] = isset($data['slug_organism']) ? $data['slug_organism'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return $this
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets url_widget
     *
     * @return string
     */
    public function getUrlWidget()
    {
        return $this->container['url_widget'];
    }

    /**
     * Sets url_widget
     *
     * @param string $url_widget url_widget
     *
     * @return $this
     */
    public function setUrlWidget($url_widget)
    {
        $this->container['url_widget'] = $url_widget;

        return $this;
    }

    /**
     * Gets url_bouton
     *
     * @return string
     */
    public function getUrlBouton()
    {
        return $this->container['url_bouton'];
    }

    /**
     * Sets url_bouton
     *
     * @param string $url_bouton url_bouton
     *
     * @return $this
     */
    public function setUrlBouton($url_bouton)
    {
        $this->container['url_bouton'] = $url_bouton;

        return $this;
    }

    /**
     * Gets name_organism
     *
     * @return string
     */
    public function getNameOrganism()
    {
        return $this->container['name_organism'];
    }

    /**
     * Sets name_organism
     *
     * @param string $name_organism name_organism
     *
     * @return $this
     */
    public function setNameOrganism($name_organism)
    {
        $this->container['name_organism'] = $name_organism;

        return $this;
    }

    /**
     * Gets slug_organism
     *
     * @return string
     */
    public function getSlugOrganism()
    {
        return $this->container['slug_organism'];
    }

    /**
     * Sets slug_organism
     *
     * @param string $slug_organism slug_organism
     *
     * @return $this
     */
    public function setSlugOrganism($slug_organism)
    {
        $this->container['slug_organism'] = $slug_organism;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
